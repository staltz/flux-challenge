;; Analyzed by ClojureScript 1.7.122
{:name clojure.set, :doc "Set operations such as union/intersection.", :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil, :defs {union {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\clojure\\set.cljs", :line 19, :column 7, :end-line 19, :end-column 12, :arglists (quote ([] [s1] [s1 s2] [s1 s2 & sets])), :doc "Return a set that is the union of the input sets", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [s1] [s1 s2]), :arglists ([] [s1] [s1 s2] [s1 s2 & sets]), :arglists-meta (nil nil nil nil)}}, :name clojure.set/union, :variadic true, :file "js\\compiled\\out\\clojure\\set.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([] [s1] [s1 s2]), :arglists ([] [s1] [s1 s2] [s1 s2 & sets]), :arglists-meta (nil nil nil nil)}, :method-params ([] [s1] [s1 s2]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists ([] [s1] [s1 s2] [s1 s2 & sets]), :doc "Return a set that is the union of the input sets"}, map-invert {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\clojure\\set.cljs", :line 97, :column 7, :end-line 97, :end-column 17, :arglists (quote ([m])), :doc "Returns the map with the vals mapped to the keys."}, :name clojure.set/map-invert, :variadic false, :file "js\\compiled\\out\\clojure\\set.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Returns the map with the vals mapped to the keys."}, join {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\clojure\\set.cljs", :line 101, :column 7, :end-line 101, :end-column 11, :arglists (quote ([xrel yrel] [xrel yrel km])), :doc "When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([xrel yrel] [xrel yrel km]), :arglists ([xrel yrel] [xrel yrel km]), :arglists-meta (nil nil)}}, :name clojure.set/join, :variadic false, :file "js\\compiled\\out\\clojure\\set.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([xrel yrel] [xrel yrel km]), :arglists ([xrel yrel] [xrel yrel km]), :arglists-meta (nil nil)}, :method-params ([xrel yrel] [xrel yrel km]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 3, :fn-var true, :arglists ([xrel yrel] [xrel yrel km]), :doc "When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."}, select {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\clojure\\set.cljs", :line 61, :column 7, :end-line 61, :end-column 13, :arglists (quote ([pred xset])), :doc "Returns a set of the elements for which pred is true"}, :name clojure.set/select, :variadic false, :file "js\\compiled\\out\\clojure\\set.cljs", :end-column 13, :method-params ([pred xset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred xset])), :doc "Returns a set of the elements for which pred is true"}, intersection {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\clojure\\set.cljs", :line 31, :column 7, :end-line 31, :end-column 19, :arglists (quote ([s1] [s1 s2] [s1 s2 & sets])), :doc "Return a set that is the intersection of the input sets", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([s1] [s1 s2]), :arglists ([s1] [s1 s2] [s1 s2 & sets]), :arglists-meta (nil nil nil)}}, :name clojure.set/intersection, :variadic true, :file "js\\compiled\\out\\clojure\\set.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([s1] [s1 s2]), :arglists ([s1] [s1 s2] [s1 s2 & sets]), :arglists-meta (nil nil nil)}, :method-params ([s1] [s1 s2]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists ([s1] [s1 s2] [s1 s2 & sets]), :doc "Return a set that is the intersection of the input sets"}, superset? {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\clojure\\set.cljs", :line 137, :column 7, :end-line 137, :end-column 16, :arglists (quote ([set1 set2])), :doc "Is set1 a superset of set2?"}, :name clojure.set/superset?, :variadic false, :file "js\\compiled\\out\\clojure\\set.cljs", :end-column 16, :method-params ([set1 set2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 2, :fn-var true, :arglists (quote ([set1 set2])), :doc "Is set1 a superset of set2?"}, index {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\clojure\\set.cljs", :line 87, :column 7, :end-line 87, :end-column 12, :arglists (quote ([xrel ks])), :doc "Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."}, :name clojure.set/index, :variadic false, :file "js\\compiled\\out\\clojure\\set.cljs", :end-column 12, :method-params ([xrel ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xrel ks])), :doc "Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."}, bubble-max-key {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\clojure\\set.cljs", :line 13, :column 8, :end-line 13, :end-column 22, :private true, :arglists (quote ([k coll]))}, :private true, :name clojure.set/bubble-max-key, :variadic false, :file "js\\compiled\\out\\clojure\\set.cljs", :end-column 22, :method-params ([k coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k coll]))}, subset? {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\clojure\\set.cljs", :line 131, :column 7, :end-line 131, :end-column 14, :arglists (quote ([set1 set2])), :doc "Is set1 a subset of set2?"}, :name clojure.set/subset?, :variadic false, :file "js\\compiled\\out\\clojure\\set.cljs", :end-column 14, :method-params ([set1 set2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([set1 set2])), :doc "Is set1 a subset of set2?"}, rename {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\clojure\\set.cljs", :line 82, :column 7, :end-line 82, :end-column 13, :arglists (quote ([xrel kmap])), :doc "Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"}, :name clojure.set/rename, :variadic false, :file "js\\compiled\\out\\clojure\\set.cljs", :end-column 13, :method-params ([xrel kmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xrel kmap])), :doc "Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"}, rename-keys {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\clojure\\set.cljs", :line 72, :column 7, :end-line 72, :end-column 18, :arglists (quote ([map kmap])), :doc "Returns the map with the keys in kmap renamed to the vals in kmap"}, :name clojure.set/rename-keys, :variadic false, :file "js\\compiled\\out\\clojure\\set.cljs", :end-column 18, :method-params ([map kmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([map kmap])), :doc "Returns the map with the keys in kmap renamed to the vals in kmap"}, project {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\clojure\\set.cljs", :line 67, :column 7, :end-line 67, :end-column 14, :arglists (quote ([xrel ks])), :doc "Returns a rel of the elements of xrel with only the keys in ks"}, :name clojure.set/project, :variadic false, :file "js\\compiled\\out\\clojure\\set.cljs", :end-column 14, :method-params ([xrel ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xrel ks])), :doc "Returns a rel of the elements of xrel with only the keys in ks"}, difference {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\clojure\\set.cljs", :line 46, :column 7, :end-line 46, :end-column 17, :arglists (quote ([s1] [s1 s2] [s1 s2 & sets])), :doc "Return a set that is the first set without elements of the remaining sets", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([s1] [s1 s2]), :arglists ([s1] [s1 s2] [s1 s2 & sets]), :arglists-meta (nil nil nil)}}, :name clojure.set/difference, :variadic true, :file "js\\compiled\\out\\clojure\\set.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([s1] [s1 s2]), :arglists ([s1] [s1 s2] [s1 s2 & sets]), :arglists-meta (nil nil nil)}, :method-params ([s1] [s1 s2]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists ([s1] [s1 s2] [s1 s2 & sets]), :doc "Return a set that is the first set without elements of the remaining sets"}}}