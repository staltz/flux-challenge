;; Analyzed by ClojureScript 1.7.122
{:use-macros {go cljs.core.async.macros, alt! cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name chord.client, :imports nil, :requires {a cljs.core.async, cljs.core.async cljs.core.async, chord.channels chord.channels, chord.format chord.format}, :uses {wrap-format chord.format, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, write-to-ws! chord.channels, bidi-ch chord.channels, >! cljs.core.async, put! cljs.core.async, read-from-ws! chord.channels}, :defs {on-close {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\chord\\client.cljs", :line 8, :column 8, :end-line 8, :end-column 16, :private true, :arglists (quote ([ws read-ch write-ch & [err-meta-channel]])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ws read-ch write-ch [err-meta-channel])], :arglists ([ws read-ch write-ch & [err-meta-channel]]), :arglists-meta (nil)}}, :private true, :name chord.client/on-close, :variadic true, :file "js\\compiled\\out\\chord\\client.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(ws read-ch write-ch [err-meta-channel])], :arglists ([ws read-ch write-ch & [err-meta-channel]]), :arglists-meta (nil)}, :method-params [(ws read-ch write-ch [err-meta-channel])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 3, :fn-var true, :arglists ([ws read-ch write-ch & [err-meta-channel]])}, make-open-ch {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\chord\\client.cljs", :line 27, :column 8, :end-line 27, :end-column 20, :private true, :arglists (quote ([ws read-ch write-ch v]))}, :private true, :name chord.client/make-open-ch, :variadic false, :file "js\\compiled\\out\\chord\\client.cljs", :end-column 20, :method-params ([ws read-ch write-ch v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ws read-ch write-ch v]))}, close-event->maybe-error {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\chord\\client.cljs", :line 36, :column 7, :end-line 36, :end-column 31, :arglists (quote ([ev]))}, :name chord.client/close-event->maybe-error, :variadic false, :file "js\\compiled\\out\\chord\\client.cljs", :end-column 31, :method-params ([ev]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ev]))}, ws-ch {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\chord\\client.cljs", :line 41, :column 7, :end-line 41, :end-column 12, :arglists (quote ([ws-url & [{:keys [read-ch write-ch format], :as opts}]])), :doc "Creates websockets connection and returns a 2-sided channel when the websocket is opened.\n   Arguments:\n    ws-url           - (required) link to websocket service\n    opts             - (optional) map to configure reading/writing channels\n      :read-ch       - (optional) (possibly buffered) channel to use for reading the websocket\n      :write-ch      - (optional) (possibly buffered) channel to use for writing to the websocket\n      :format        - (optional) data format to use on the channel, (at the moment)\n                                  either :edn (default), :json, :json-kw or :str.\n\n   Usage:\n    (:require [cljs.core.async :as a])\n\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\"))\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\" {:read-ch (a/chan (a/sliding-buffer 10))}))\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\" {:read-ch (a/chan (a/sliding-buffer 10))\n                                          :write-ch (a/chan (a/dropping-buffer 10))}))", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ws-url [{:keys [read-ch write-ch format], :as opts}])], :arglists ([ws-url & [{:keys [read-ch write-ch format], :as opts}]]), :arglists-meta (nil)}}, :name chord.client/ws-ch, :variadic true, :file "js\\compiled\\out\\chord\\client.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ws-url [{:keys [read-ch write-ch format], :as opts}])], :arglists ([ws-url & [{:keys [read-ch write-ch format], :as opts}]]), :arglists-meta (nil)}, :method-params [(ws-url [{:keys [read-ch write-ch format], :as opts}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists ([ws-url & [{:keys [read-ch write-ch format], :as opts}]]), :doc "Creates websockets connection and returns a 2-sided channel when the websocket is opened.\n   Arguments:\n    ws-url           - (required) link to websocket service\n    opts             - (optional) map to configure reading/writing channels\n      :read-ch       - (optional) (possibly buffered) channel to use for reading the websocket\n      :write-ch      - (optional) (possibly buffered) channel to use for writing to the websocket\n      :format        - (optional) data format to use on the channel, (at the moment)\n                                  either :edn (default), :json, :json-kw or :str.\n\n   Usage:\n    (:require [cljs.core.async :as a])\n\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\"))\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\" {:read-ch (a/chan (a/sliding-buffer 10))}))\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\" {:read-ch (a/chan (a/sliding-buffer 10))\n                                          :write-ch (a/chan (a/dropping-buffer 10))}))"}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:write-ch :format :else :on-close :wasClean :default :recur :ws-channel :reason :read-ch :code :error}, :order [:recur :error :code :wasClean :else :reason :read-ch :write-ch :format :on-close :ws-channel :default]}, :doc nil}