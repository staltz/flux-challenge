;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name chord.format, :imports nil, :requires {a cljs.core.async, cljs.core.async cljs.core.async, edn cljs.reader, cljs.reader cljs.reader, clojure.walk clojure.walk, transit cognitect.transit, cognitect.transit cognitect.transit}, :uses {keywordize-keys clojure.walk}, :defs {wrap-format {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\chord\\format.cljs", :line 82, :column 7, :end-line 82, :end-column 18, :arglists (quote ([{:keys [read-ch write-ch]} {:keys [format], :as opts}]))}, :name chord.format/wrap-format, :variadic false, :file "js\\compiled\\out\\chord\\format.cljs", :end-column 18, :method-params ([p__24213 p__24214]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [read-ch write-ch]} {:keys [format], :as opts}]))}, t_chord$format24206 {:num-fields 2, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/t_chord$format24206, :file "js\\compiled\\out\\chord\\format.cljs", :type true, :anonymous true, :column 3, :line 51, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_chord$format24203 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([opts json-formatter meta24204])), :file nil}, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/->t_chord$format24203, :variadic false, :file "js\\compiled\\out\\chord\\format.cljs", :method-params ([opts json-formatter meta24204]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 43, :max-fixed-arity 3, :fn-var true, :arglists (quote ([opts json-formatter meta24204])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_chord$format24203 {:num-fields 3, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/t_chord$format24203, :file "js\\compiled\\out\\chord\\format.cljs", :type true, :anonymous true, :column 5, :line 43, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_chord$format24197 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([_ meta24198])), :file nil}, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/->t_chord$format24197, :variadic false, :file "js\\compiled\\out\\chord\\format.cljs", :method-params ([_ meta24198]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ meta24198])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_chord$format24209 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([_ meta24210])), :file nil}, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/->t_chord$format24209, :variadic false, :file "js\\compiled\\out\\chord\\format.cljs", :method-params ([_ meta24210]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ meta24210])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, freeze {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\chord\\format.cljs", :line 18, :column 4, :end-line 18, :end-column 10, :protocol chord.format/ChordFormatter, :doc nil, :arglists (quote ([_ obj]))}, :protocol chord.format/ChordFormatter, :name chord.format/freeze, :variadic false, :file "js\\compiled\\out\\chord\\format.cljs", :end-column 10, :method-params ([_ obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ obj])), :doc nil}, formatter* {:name chord.format/formatter*, :file "js\\compiled\\out\\chord\\format.cljs", :line 21, :column 1, :end-line 21, :end-column 21, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\chord\\format.cljs", :line 21, :column 11, :end-line 21, :end-column 21}}, formatter {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\chord\\format.cljs", :line 77, :column 7, :end-line 77, :end-column 16, :arglists (quote ([opts]))}, :name chord.format/formatter, :variadic false, :file "js\\compiled\\out\\chord\\format.cljs", :end-column 16, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}, ->t_chord$format24206 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([_ meta24207])), :file nil}, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/->t_chord$format24206, :variadic false, :file "js\\compiled\\out\\chord\\format.cljs", :method-params ([_ meta24207]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ meta24207])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, thaw {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\chord\\format.cljs", :line 19, :column 4, :end-line 19, :end-column 8, :protocol chord.format/ChordFormatter, :doc nil, :arglists (quote ([_ s]))}, :protocol chord.format/ChordFormatter, :name chord.format/thaw, :variadic false, :file "js\\compiled\\out\\chord\\format.cljs", :end-column 8, :method-params ([_ s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ s])), :doc nil}, ChordFormatter {:meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\chord\\format.cljs", :line 17, :column 14, :end-line 17, :end-column 28, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {freeze [[_ obj]], thaw [[_ s]]}}}, :protocol-symbol true, :name chord.format/ChordFormatter, :file "js\\compiled\\out\\chord\\format.cljs", :end-column 28, :column 1, :line 17, :protocol-info {:methods {freeze [[_ obj]], thaw [[_ s]]}}, :info nil, :end-line 17, :impls #{chord.format/t_chord$format24197 chord.format/t_chord$format24203 chord.format/t_chord$format24200 chord.format/t_chord$format24209 chord.format/t_chord$format24206}, :doc nil, :jsdoc ("@interface")}, t_chord$format24197 {:num-fields 2, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/t_chord$format24197, :file "js\\compiled\\out\\chord\\format.cljs", :type true, :anonymous true, :column 3, :line 24, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_chord$format24200 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([_ meta24201])), :file nil}, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/->t_chord$format24200, :variadic false, :file "js\\compiled\\out\\chord\\format.cljs", :method-params ([_ meta24201]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ meta24201])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_chord$format24209 {:num-fields 2, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/t_chord$format24209, :file "js\\compiled\\out\\chord\\format.cljs", :type true, :anonymous true, :column 3, :line 70, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_chord$format24200 {:num-fields 2, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/t_chord$format24200, :file "js\\compiled\\out\\chord\\format.cljs", :type true, :anonymous true, :column 3, :line 32, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:write-ch :format :transit-json meta24198 :cause :else :json-kw :invalid-msg :default _ meta24210 :read-ch :str :invalid-format meta24204 :edn :error :json :hierarchy meta24207 opts meta24201 json-formatter :message}, :order [:hierarchy :format :default :edn _ meta24198 :json meta24201 :json-kw opts json-formatter meta24204 :transit-json meta24207 :str meta24210 :read-ch :write-ch :message :error :cause :invalid-msg :invalid-format :else]}, :doc nil}