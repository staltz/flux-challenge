;; Analyzed by ClojureScript 1.7.122
{:use-macros {go-loop cljs.core.async.macros}, :excludes #{}, :name chord.channels, :imports nil, :requires {cljs.core.async cljs.core.async, p cljs.core.async.impl.protocols, cljs.core.async.impl.protocols cljs.core.async.impl.protocols}, :uses {<! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {read-from-ws! {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\chord\\channels.cljs", :line 12, :column 7, :end-line 12, :end-column 20, :arglists (quote ([ws ch]))}, :name chord.channels/read-from-ws!, :variadic false, :file "js\\compiled\\out\\chord\\channels.cljs", :end-column 20, :method-params ([ws ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ws ch]))}, write-to-ws! {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\chord\\channels.cljs", :line 22, :column 7, :end-line 22, :end-column 19, :arglists (quote ([ws ch]))}, :name chord.channels/write-to-ws!, :variadic false, :file "js\\compiled\\out\\chord\\channels.cljs", :end-column 19, :method-params ([ws ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ws ch]))}, bidi-ch {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\chord\\channels.cljs", :line 30, :column 7, :end-line 30, :end-column 14, :arglists (quote ([read-ch write-ch & [{:keys [on-close]}]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(read-ch write-ch [{:keys [on-close]}])], :arglists ([read-ch write-ch & [{:keys [on-close]}]]), :arglists-meta (nil)}}, :name chord.channels/bidi-ch, :variadic true, :file "js\\compiled\\out\\chord\\channels.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(read-ch write-ch [{:keys [on-close]}])], :arglists ([read-ch write-ch & [{:keys [on-close]}]]), :arglists-meta (nil)}, :method-params [(read-ch write-ch [{:keys [on-close]}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists ([read-ch write-ch & [{:keys [on-close]}]])}, t_chord$channels24316 {:num-fields 7, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name chord.channels/t_chord$channels24316, :file "js\\compiled\\out\\chord\\channels.cljs", :type true, :anonymous true, :column 3, :line 31, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_chord$channels24316 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([read-ch write-ch p__24312 vec__24313 map__24314 on-close meta24317])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name chord.channels/->t_chord$channels24316, :variadic false, :file "js\\compiled\\out\\chord\\channels.cljs", :method-params ([read-ch write-ch p__24312 vec__24313 map__24314 on-close meta24317]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 31, :max-fixed-arity 7, :fn-var true, :arglists (quote ([read-ch write-ch p__24312 vec__24313 map__24314 on-close meta24317])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :on-close write-ch :recur p__24312 on-close vec__24313 meta24317 map__24314 read-ch :message}, :order [:message :recur :else :on-close read-ch write-ch p__24312 vec__24313 map__24314 on-close meta24317]}, :doc nil}