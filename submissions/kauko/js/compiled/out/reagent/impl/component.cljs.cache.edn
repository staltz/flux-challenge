;; Analyzed by ClojureScript 1.7.122
{:use-macros {dbg reagent.debug, .' reagent.interop, prn reagent.debug, dev? reagent.debug, .! reagent.interop}, :excludes #{}, :name reagent.impl.component, :imports nil, :requires {util reagent.impl.util, reagent.impl.util reagent.impl.util, batch reagent.impl.batching, reagent.impl.batching reagent.impl.batching, ratom reagent.ratom, reagent.ratom reagent.ratom, reagent.interop reagent.interop, reagent.debug reagent.debug}, :uses nil, :defs {elem-counter {:name reagent.impl.component/elem-counter, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :line 229, :column 1, :end-line 229, :end-column 18, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 229, :column 6, :end-line 229, :end-column 18}}, get-wrapper {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 129, :column 7, :end-line 129, :end-column 18, :arglists (quote ([key f name]))}, :name reagent.impl.component/get-wrapper, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 18, :method-params ([key f name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 3, :fn-var true, :arglists (quote ([key f name]))}, obligatory {:name reagent.impl.component/obligatory, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :line 138, :column 1, :end-line 138, :end-column 16, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 138, :column 6, :end-line 138, :end-column 16}}, default-wrapper {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 115, :column 7, :end-line 115, :end-column 22, :arglists (quote ([f]))}, :name reagent.impl.component/default-wrapper, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 22, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, as-element {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 21, :column 7, :end-line 21, :end-column 17, :arglists (quote ([x]))}, :name reagent.impl.component/as-element, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, do-render {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 26, :column 7, :end-line 26, :end-column 16, :arglists (quote ([c]))}, :name reagent.impl.component/do-render, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, comp-name {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 216, :column 7, :end-line 216, :end-column 16, :arglists (quote ([]))}, :name reagent.impl.component/comp-name, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, add-obligatory {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 149, :column 7, :end-line 149, :end-column 21, :arglists (quote ([fun-map]))}, :name reagent.impl.component/add-obligatory, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 21, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map]))}, state-atom {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 14, :column 7, :end-line 14, :end-column 17, :arglists (quote ([this]))}, :name reagent.impl.component/state-atom, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, dash-to-camel {:name reagent.impl.component/dash-to-camel, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :line 142, :column 1, :end-line 142, :end-column 19, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 142, :column 6, :end-line 142, :end-column 19}}, static-fns {:name reagent.impl.component/static-fns, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :line 53, :column 1, :end-line 53, :end-column 16, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 53, :column 6, :end-line 53, :end-column 16}}, reactify-component {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 231, :column 7, :end-line 231, :end-column 25, :arglists (quote ([comp]))}, :name reagent.impl.component/reactify-component, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 25, :method-params ([comp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 1, :fn-var true, :arglists (quote ([comp]))}, map-to-js {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 192, :column 7, :end-line 192, :end-column 16, :arglists (quote ([m]))}, :name reagent.impl.component/map-to-js, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, *non-reactive* {:name reagent.impl.component/*non-reactive*, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :line 10, :column 1, :end-line 10, :end-column 34, :dynamic true, :declared true, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 10, :column 20, :end-line 10, :end-column 34, :dynamic true, :declared true}}, dont-wrap {:name reagent.impl.component/dont-wrap, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :line 121, :column 1, :end-line 121, :end-column 15, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 121, :column 6, :end-line 121, :end-column 15}}, fun-name {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 160, :column 7, :end-line 160, :end-column 15, :arglists (quote ([f]))}, :name reagent.impl.component/fun-name, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 15, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, *current-component* {:name reagent.impl.component/*current-component*, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :line 8, :column 1, :end-line 8, :end-column 39, :dynamic true, :declared true, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 8, :column 20, :end-line 8, :end-column 39, :dynamic true, :declared true}}, camelify-map-keys {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 144, :column 7, :end-line 144, :end-column 24, :arglists (quote ([fun-map]))}, :name reagent.impl.component/camelify-map-keys, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 24, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map]))}, shallow-obj-to-map {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 225, :column 7, :end-line 225, :end-column 25, :arglists (quote ([o]))}, :name reagent.impl.component/shallow-obj-to-map, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 25, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}, cljsify {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 198, :column 7, :end-line 198, :end-column 14, :arglists (quote ([body]))}, :name reagent.impl.component/cljsify, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 14, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body]))}, dont-bind {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 123, :column 7, :end-line 123, :end-column 16, :arglists (quote ([f]))}, :name reagent.impl.component/dont-bind, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, add-render {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 152, :column 7, :end-line 152, :end-column 17, :arglists (quote ([fun-map render-f name]))}, :name reagent.impl.component/add-render, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 17, :method-params ([fun-map render-f name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fun-map render-f name]))}, custom-wrapper {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 60, :column 7, :end-line 60, :end-column 21, :arglists (quote ([key f]))}, :name reagent.impl.component/custom-wrapper, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 21, :method-params ([key f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key f]))}, create-class {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 205, :column 7, :end-line 205, :end-column 19, :arglists (quote ([body]))}, :name reagent.impl.component/create-class, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 19, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body]))}, wrap-funs {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\component.cljs", :line 170, :column 7, :end-line 170, :end-column 16, :arglists (quote ([fmap]))}, :name reagent.impl.component/wrap-funs, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\component.cljs", :end-column 16, :method-params ([fmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fmap]))}}, :require-macros {reagent.interop reagent.interop, reagent.debug reagent.debug}, :cljs.analyzer/constants {:seen #{body render-fun :displayName :cljsRender :name map? :componentWillUnmount :shouldComponentUpdate :reagentRender :render :cljsName :-elem-count ifn? :componentFunction :componentWillMount f}, :order [ifn? f :render :cljsRender :reagentRender :cljsName :shouldComponentUpdate :componentWillMount :componentWillUnmount :name :componentFunction render-fun :displayName map? body :-elem-count]}, :doc nil}