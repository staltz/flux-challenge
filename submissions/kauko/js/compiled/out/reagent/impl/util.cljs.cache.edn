;; Analyzed by ClojureScript 1.7.122
{:use-macros {log reagent.debug, dbg reagent.debug, .' reagent.interop, warn reagent.debug, .! reagent.interop}, :excludes #{}, :name reagent.impl.util, :imports nil, :requires {reagent.debug reagent.debug, reagent.interop reagent.interop, string clojure.string, clojure.string clojure.string}, :uses nil, :defs {get-props {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 24, :column 7, :end-line 24, :end-column 16, :arglists (quote ([c]))}, :name reagent.impl.util/get-props, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, get-argv {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 21, :column 7, :end-line 21, :end-column 15, :arglists (quote ([c]))}, :name reagent.impl.util/get-argv, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 15, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, merge-props {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 95, :column 7, :end-line 95, :end-column 18, :arglists (quote ([p1 p2]))}, :name reagent.impl.util/merge-props, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 18, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, re-render-component {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 129, :column 7, :end-line 129, :end-column 26, :arglists (quote ([comp container]))}, :name reagent.impl.util/re-render-component, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 26, :method-params ([comp container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp container]))}, force-update-all {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 136, :column 7, :end-line 136, :end-column 23, :arglists (quote ([]))}, :name reagent.impl.util/force-update-all, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, capitalize {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 53, :column 7, :end-line 53, :end-column 17, :arglists (quote ([s]))}, :name reagent.impl.util/capitalize, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, cached-react-class {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 33, :column 7, :end-line 33, :end-column 25, :arglists (quote ([c]))}, :name reagent.impl.util/cached-react-class, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 25, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, dash-to-camel {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 58, :column 7, :end-line 58, :end-column 20, :arglists (quote ([dashed]))}, :name reagent.impl.util/dash-to-camel, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 20, :method-params ([dashed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dashed]))}, reagent-component? {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 30, :column 7, :end-line 30, :end-column 25, :arglists (quote ([c]))}, :name reagent.impl.util/reagent-component?, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 25, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, dont-camel-case {:name reagent.impl.util/dont-camel-case, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :line 51, :column 1, :end-line 51, :end-column 21, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 51, :column 6, :end-line 51, :end-column 21}}, merge-style {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 87, :column 8, :end-line 87, :end-column 19, :private true, :arglists (quote ([p1 p2]))}, :private true, :name reagent.impl.util/merge-style, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 19, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, memoize-1 {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 41, :column 7, :end-line 41, :end-column 16, :arglists (quote ([f]))}, :name reagent.impl.util/memoize-1, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, clear-container {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 107, :column 7, :end-line 107, :end-column 22, :arglists (quote ([node]))}, :name reagent.impl.util/clear-container, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 22, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, unmount-component-at-node {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 132, :column 7, :end-line 132, :end-column 32, :arglists (quote ([container]))}, :name reagent.impl.util/unmount-component-at-node, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 32, :method-params ([container]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([container]))}, ->partial-ifn {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 68, :column 10, :end-line 68, :end-column 21, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :factory :positional, :arglists (quote ([f args p]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :name reagent.impl.util/->partial-ifn, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 21, :method-params ([f args p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 68, :end-line 68, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f args p])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}}, render-component {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 116, :column 7, :end-line 116, :end-column 23, :arglists (quote ([comp container callback]))}, :name reagent.impl.util/render-component, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 23, :method-params ([comp container callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comp container callback]))}, extract-children {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 15, :column 7, :end-line 15, :end-column 23, :arglists (quote ([v]))}, :name reagent.impl.util/extract-children, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 23, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, extract-props {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 11, :column 7, :end-line 11, :end-column 20, :arglists (quote ([v]))}, :name reagent.impl.util/extract-props, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 20, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, partial-ifn {:num-fields 3, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :name reagent.impl.util/partial-ifn, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 21, :type true, :column 10, :line 68, :record false, :end-line 68, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}}, get-children {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 27, :column 7, :end-line 27, :end-column 19, :arglists (quote ([c]))}, :name reagent.impl.util/get-children, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 19, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, roots {:name reagent.impl.util/roots, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :line 105, :column 1, :end-line 105, :end-column 15, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 105, :column 10, :end-line 105, :end-column 15}}, merge-class {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 79, :column 8, :end-line 79, :end-column 19, :private true, :arglists (quote ([p1 p2]))}, :private true, :name reagent.impl.util/merge-class, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 19, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, is-client {:name reagent.impl.util/is-client, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :line 6, :column 1, :end-line 6, :end-column 15, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 6, :column 6, :end-line 6, :end-column 15}}, cache-react-class {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 36, :column 7, :end-line 36, :end-column 24, :arglists (quote ([c constructor]))}, :name reagent.impl.util/cache-react-class, :variadic false, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :end-column 24, :method-params ([c constructor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c constructor]))}, *always-update* {:name reagent.impl.util/*always-update*, :file "js\\compiled\\out\\reagent\\impl\\util.cljs", :line 103, :column 1, :end-line 103, :end-column 31, :dynamic true, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\reagent\\impl\\util.cljs", :line 103, :column 16, :end-line 103, :end-column 31, :dynamic true}}}, :require-macros {reagent.debug reagent.debug, reagent.interop reagent.interop}, :cljs.analyzer/constants {:seen #{p :else args map? :style :class p1 :mutable f}, :order [f args p :mutable :class :style map? p1 :else]}, :doc nil}