;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name cljs.core.async.impl.channels, :imports nil, :requires {impl cljs.core.async.impl.protocols, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, buffers cljs.core.async.impl.buffers, cljs.core.async.impl.buffers cljs.core.async.impl.buffers}, :uses nil, :defs {t_cljs$core$async$impl$channels27306 {:num-fields 3, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/t_cljs$core$async$impl$channels27306, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :type true, :anonymous true, :column 3, :line 17, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, put-active? {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :line 22, :column 7, :end-line 22, :end-column 18, :arglists (quote ([box]))}, :name cljs.core.async.impl.channels/put-active?, :variadic false, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :end-column 18, :method-params ([box]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([box]))}, chan {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :line 165, :column 7, :end-line 165, :end-column 11, :arglists (quote ([buf] [buf xform] [buf xform exh])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([buf] [buf xform] [buf xform exh]), :arglists ([buf] [buf xform] [buf xform exh]), :arglists-meta (nil nil nil)}}, :name cljs.core.async.impl.channels/chan, :variadic false, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([buf] [buf xform] [buf xform exh]), :arglists ([buf] [buf xform] [buf xform exh]), :arglists-meta (nil nil nil)}, :method-params ([buf] [buf xform] [buf xform exh]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 3, :fn-var true, :arglists ([buf] [buf xform] [buf xform exh])}, t_cljs$core$async$impl$channels27303 {:num-fields 3, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/t_cljs$core$async$impl$channels27303, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :type true, :anonymous true, :column 3, :line 17, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, box {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :line 16, :column 7, :end-line 16, :end-column 10, :arglists (quote ([val]))}, :name cljs.core.async.impl.channels/box, :variadic false, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :end-column 10, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val]))}, MMC {:meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :line 27, :column 14, :end-line 27, :end-column 17, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {abort [[this]]}}}, :protocol-symbol true, :name cljs.core.async.impl.channels/MMC, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :end-column 17, :column 1, :line 27, :protocol-info {:methods {abort [[this]]}}, :info nil, :end-line 27, :impls #{cljs.core.async.impl.channels/ManyToManyChannel}, :doc nil, :jsdoc ("@interface")}, ->PutBox {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :line 20, :column 10, :end-line 20, :end-column 16, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([handler val]))}, :protocols #{}, :name cljs.core.async.impl.channels/->PutBox, :variadic false, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :end-column 16, :method-params ([handler val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler val])), :skip-protocol-flag nil}, ->t_cljs$core$async$impl$channels27306 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([box val meta27307])), :file nil}, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/->t_cljs$core$async$impl$channels27306, :variadic false, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :method-params ([box val meta27307]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([box val meta27307])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, abort {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :line 28, :column 4, :end-line 28, :end-column 9, :protocol cljs.core.async.impl.channels/MMC, :doc nil, :arglists (quote ([this]))}, :protocol cljs.core.async.impl.channels/MMC, :name cljs.core.async.impl.channels/abort, :variadic false, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, ex-handler {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :line 155, :column 8, :end-line 155, :end-column 18, :private true, :arglists (quote ([ex]))}, :private true, :name cljs.core.async.impl.channels/ex-handler, :variadic false, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :end-column 18, :method-params ([ex]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ex]))}, MAX_DIRTY {:name cljs.core.async.impl.channels/MAX_DIRTY, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :line 25, :column 1, :end-line 25, :end-column 23, :const true, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :line 25, :column 14, :end-line 25, :end-column 23, :const true}}, ManyToManyChannel {:num-fields 7, :protocols #{cljs.core.async.impl.channels/MMC cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort}, :name cljs.core.async.impl.channels/ManyToManyChannel, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :end-column 27, :type true, :column 10, :line 30, :record false, :end-line 30, :skip-protocol-flag nil}, handle {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :line 159, :column 8, :end-line 159, :end-column 14, :private true, :arglists (quote ([buf exh t]))}, :private true, :name cljs.core.async.impl.channels/handle, :variadic false, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :end-column 14, :method-params ([buf exh t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 3, :fn-var true, :arglists (quote ([buf exh t]))}, ->ManyToManyChannel {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :line 30, :column 10, :end-line 30, :end-column 27, :protocols #{cljs.core.async.impl.channels/MMC cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([takes dirty-takes puts dirty-puts buf closed add!]))}, :protocols #{cljs.core.async.impl.channels/MMC cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort}, :name cljs.core.async.impl.channels/->ManyToManyChannel, :variadic false, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :end-column 27, :method-params ([takes dirty-takes puts dirty-puts buf closed add!]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 30, :end-line 30, :max-fixed-arity 7, :fn-var true, :arglists (quote ([takes dirty-takes puts dirty-puts buf closed add!])), :skip-protocol-flag nil}, ->t_cljs$core$async$impl$channels27303 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([box val meta27304])), :file nil}, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/->t_cljs$core$async$impl$channels27303, :variadic false, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :method-params ([box val meta27304]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([box val meta27304])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, PutBox {:num-fields 2, :protocols #{}, :name cljs.core.async.impl.channels/PutBox, :file "js\\compiled\\out\\cljs\\core\\async\\impl\\channels.cljs", :end-column 16, :type true, :column 10, :line 20, :record false, :end-line 20, :skip-protocol-flag nil}}, :require-macros nil, :cljs.analyzer/constants {:seen #{.-length puts meta27304 handler < closed buf add! meta27307 box nil? not-native val not :tag :mutable quote dirty-takes :arglists dirty-puts takes impl/MAX-QUEUE-SIZE}, :order [box :arglists quote val meta27304 meta27307 handler not nil? < .-length puts impl/MAX-QUEUE-SIZE takes dirty-takes :mutable dirty-puts buf :tag not-native closed add!]}, :doc nil}