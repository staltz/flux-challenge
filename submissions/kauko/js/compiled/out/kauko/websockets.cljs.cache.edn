;; Analyzed by ClojureScript 1.7.122
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name kauko.websockets, :imports nil, :requires {chord.client chord.client, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async, close! cljs.core.async, ws-ch chord.client, >! cljs.core.async, put! cljs.core.async}, :defs {receive-msgs! {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\src\\kauko\\websockets.cljs", :line 6, :column 8, :end-line 6, :end-column 21, :private true, :arglists (quote ([server-ch atom]))}, :private true, :name kauko.websockets/receive-msgs!, :variadic false, :file "src\\kauko\\websockets.cljs", :end-column 21, :method-params ([server-ch atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([server-ch atom]))}, start-websocket! {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\src\\kauko\\websockets.cljs", :line 14, :column 7, :end-line 14, :end-column 23, :arglists (quote ([atom]))}, :name kauko.websockets/start-websocket!, :variadic false, :file "src\\kauko\\websockets.cljs", :end-column 23, :method-params ([atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([atom]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:format :else :recur :ws-channel :json :message}, :order [:recur :message :else :format :json :ws-channel]}, :doc nil}