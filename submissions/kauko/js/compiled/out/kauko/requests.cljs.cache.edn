;; Analyzed by ClojureScript 1.7.122
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name kauko.requests, :imports nil, :requires {http cljs-http.client, cljs-http.client cljs-http.client, cljs-http.core cljs-http.core, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async, chan cljs.core.async, abort! cljs-http.core, >! cljs.core.async}, :defs {pending-requests {:name kauko.requests/pending-requests, :file "src\\kauko\\requests.cljs", :line 7, :column 1, :end-line 7, :end-column 22, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\src\\kauko\\requests.cljs", :line 7, :column 6, :end-line 7, :end-column 22}}, out-channel {:name kauko.requests/out-channel, :file "src\\kauko\\requests.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\src\\kauko\\requests.cljs", :line 8, :column 6, :end-line 8, :end-column 17}}, GET! {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\src\\kauko\\requests.cljs", :line 10, :column 8, :end-line 10, :end-column 12, :private true, :arglists (quote ([id]))}, :private true, :name kauko.requests/GET!, :variadic false, :file "src\\kauko\\requests.cljs", :end-column 12, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, abort-request! {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\src\\kauko\\requests.cljs", :line 18, :column 7, :end-line 18, :end-column 21, :arglists (quote ([id]))}, :name kauko.requests/abort-request!, :variadic false, :file "src\\kauko\\requests.cljs", :end-column 21, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, abort-requests! {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\src\\kauko\\requests.cljs", :line 24, :column 7, :end-line 24, :end-column 22, :arglists (quote ([]))}, :name kauko.requests/abort-requests!, :variadic false, :file "src\\kauko\\requests.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-sith! {:protocol-inline nil, :meta {:file "C:\\Users\\kauko\\Documents\\code\\flux-challenge\\submissions\\kauko\\src\\kauko\\requests.cljs", :line 29, :column 7, :end-line 29, :end-column 16, :arglists (quote ([id]))}, :name kauko.requests/get-sith!, :variadic false, :file "src\\kauko\\requests.cljs", :end-column 16, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :recur :with-credentials? :foo :id :body}, :order [:with-credentials? :body :id :recur :else :foo]}, :doc nil}